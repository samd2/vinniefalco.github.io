Title: Understanding Coroutine Abstractions



Abstract:

Authoring code using callback-based interfaces presents some added challenges
such as controlling object lifetimes and specifying functions using inverted
control flow. What if it was possible to write a function which can be paused
and then resumed later? What if it was possible to write code which performs
asynchronous operations, using a synchronous style with a minimum of
ceremony? Enter the Coroutine.

This talk prepares you by introducing coroutine concepts, convering
both stackful and stackless types of coroutines, along with examples of how
they may be used to employ powerful and expressive idioms such as
generators, functional programming, and cooperative multi-tasking.

Armed with a background in coroutine theory, the talk transitions to the
main discussion: analysis of the leading coroutine papers and libraries,
as well as introducing a new coroutine design which is the subject of an
up and coming paper.

Coroutines will arrive in C++ with certainty. No matter what your level of
skill or knowledge, you will be more ready for them after attending this
presentation!



Outline:

1     Coroutine theory
1.1   Suspending a function
1.2   Suspend-down versus suspend-up-and-out
1.3   Stackful versus stackless
1.4   The coroutine transformation
1.4.1 Library-only solutions
1.4.2 Compiler-assisted solutions

2     Coroutine Middleware
2.1   Generators
2.2   Asynchrony
2.3   Functional Programming

3     Coroutine Designs
3.1   Stackful
3.2   Coroutines TS ("co_await")
3.3   Core Coroutines ("[<-]")
3.4   Design flaws

4     Resumable Expressions
4.1   The "Minimal Abstraction"
4.2   The "Return Type Transformation"
4.3   Pros and Cons

5     The Future of Coroutines



History:

This talk has never before been presented.



Bios:

Christopher Kohlhoff (Preferred speaker)

Chris is the author of Boost.Asio, Networking TS, Executors TS,
and Resumable Expressions.

Vinnie Falco

Vinnie is the author of BearShare, DSPFilters, and most recently Boost.Beast - a C++ header only library that offers implementations for HTTP and WebSockets, located here: https://github.com/boostorg/beast/ 
